{"version":3,"sources":["services/todo.js","App.js","index.js"],"names":["baseUrl","getTodos","a","axios","get","response","data","getImage","responseType","btoa","Uint8Array","reduce","byte","String","fromCharCode","base64","todosService","addTodo","newTodo","post","changeDone","id","App","useState","tasks","setTask","imgPath","setImage","useEffect","res","fetchData","then","submitHandler","event","preventDefault","task","target","value","text","done","newTask","concat","console","log","message","switchDone","changedTodo","map","t","style","src","alt","width","onSubmit","name","onClick","ReactDOM","render","document","getElementById"],"mappings":"uMACMA,EAAU,IAEVC,EAAQ,uCAAG,4BAAAC,EAAA,sEACUC,IAAMC,IAAN,UAAaJ,EAAb,WADV,cACPK,EADO,yBAENA,EAASC,MAFH,2CAAH,qDAKRC,EAAQ,uCAAG,8BAAAL,EAAA,sEACUC,IAAMC,IAAN,UAAaJ,EAAb,UAA8B,CAAEQ,aAAc,gBADxD,cACPH,EADO,gBAEQI,KACjB,IAAIC,WAAWL,EAASC,MAAMK,QAC5B,SAACL,EAAMM,GAAP,OAAgBN,EAAOO,OAAOC,aAAaF,KAC3C,KALO,cAEPG,EAFO,yBASN,gBAAkBA,GATZ,2CAAH,qDA6BCC,EAPM,CACjBf,WACAgB,QAZS,uCAAG,WAAOC,GAAP,eAAAhB,EAAA,sEACWC,IAAMgB,KAAN,UAAcnB,EAAd,UAA+BkB,GAD1C,cACNb,EADM,yBAELA,EAASC,MAFJ,2CAAH,sDAaTc,WARY,uCAAG,WAAOC,GAAP,eAAAnB,EAAA,sEACQC,IAAMgB,KAAN,UAAcnB,EAAd,kBAA+BqB,IADvC,cACThB,EADS,yBAERA,EAASC,MAFD,2CAAH,sDASZC,YC2CWe,EAzEH,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACTC,EADS,KACFC,EADE,OAEYF,mBAAS,MAFrB,mBAETG,EAFS,KAEAC,EAFA,KAIhBC,qBAAU,WAAM,4CACd,4BAAA1B,EAAA,sEACoBc,EAAaf,WADjC,cACQ4B,EADR,OAEEJ,EAAQI,GAFV,kBAGSA,GAHT,4CADc,uBAAC,WAAD,wBAMdC,KACC,CAACL,IAEJG,qBAAU,WACRZ,EAAaT,WAAWwB,MAAK,SAAAF,GAAG,OAAIF,EAASE,QAC5C,CAACF,IAEJ,IAAMK,EAAa,uCAAG,WAAOC,GAAP,iBAAA/B,EAAA,6DACpB+B,EAAMC,iBADc,SAGdC,EAAOF,EAAMG,OAAOD,KAAKE,MAHX,SAIIrB,EAAaC,QAAQ,CACzCqB,KAAMH,EACNI,MAAM,IANU,OAIZC,EAJY,OAQlBf,EAAQD,EAAMiB,OAAOD,IARH,gDAUlBE,QAAQC,IAAI,WAAY,KAAEC,SAVR,QAapBX,EAAMG,OAAOD,KAAKE,MAAQ,GAbN,yDAAH,sDAgBbQ,EAAU,uCAAG,WAAOxB,GAAP,eAAAnB,EAAA,sEACSc,EAAaI,WAAWC,GADjC,OACXyB,EADW,OAEjBrB,EACED,EAAMuB,KAAI,SAACC,GAAD,OAAOA,EAAE3B,KAAOA,EAAKyB,EAAcE,MAH9B,2CAAH,sDAOhB,OACE,gCACE,gCACE,oBAAIC,MAAO,CAAC,WAAc,SAA1B,mBAGA,qBAAKC,IAAKxB,EAASyB,IAAI,UAAUC,MAAM,WAGzC,uBAAMC,SAAUrB,EAAhB,UACE,uBAAOsB,KAAK,SACZ,sDAEF,qBAAKL,MAAO,CAAC,UAAa,QAA1B,SACGzB,EAAMuB,KAAI,SAACZ,GAAD,OACT,8BACE,+BACIA,EAAKG,KACP,wBACEiB,QAAS,kBAAMV,EAAWV,EAAKd,KADjC,SAIEc,EAAKI,KAAO,YAAc,oBAPtBJ,EAAKd,aCvDzBmC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.241b8543.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = '.'\n\nconst getTodos = async () => {\n    const response = await axios.get(`${baseUrl}/todos`)\n    return response.data\n}\n\nconst getImage = async () => {\n    const response = await axios.get(`${baseUrl}/image`, { responseType: 'arraybuffer' })\n    const base64 = await btoa(\n        new Uint8Array(response.data).reduce(\n          (data, byte) => data + String.fromCharCode(byte),\n          '',\n        ),\n      );\n    \n    return \"data:;base64,\" + base64\n}\n\nconst addTodo = async (newTodo) => {\n    const response = await axios.post(`${baseUrl}/todos`, newTodo)\n    return response.data\n}\n\nconst changeDone = async (id) => {\n    const response = await axios.post(`${baseUrl}/todos/${id}`)\n    return response.data\n}\n\nconst todosService = {\n    getTodos,\n    addTodo,\n    changeDone,\n    getImage\n}\n\nexport default todosService","import React, { useEffect, useState } from 'react'\nimport todosService from './services/todo'\n// const imgPath = todosService.getImage()\n\nconst App = () => {\n  const [tasks, setTask] = useState([])\n  const [imgPath, setImage] = useState(null)\n\n  useEffect(() => {\n    async function fetchData() {\n      const res = await todosService.getTodos()\n      setTask(res)\n      return res\n    }\n    fetchData()\n  }, [setTask])\n\n  useEffect(() => {\n    todosService.getImage().then(res => setImage(res))\n  }, [setImage])\n\n  const submitHandler = async (event) => {\n    event.preventDefault()\n    try {\n      let task = event.target.task.value\n      const newTask = await todosService.addTodo({\n        text: task,\n        done: false\n      })\n      setTask(tasks.concat(newTask))\n    } catch (e) {\n      console.log('Error : ', e.message)\n    }\n\n    event.target.task.value = ''\n  }\n\n  const switchDone = async (id) => {\n    const changedTodo = await todosService.changeDone(id)\n    setTask(\n      tasks.map((t) => t.id === id ? changedTodo : t)\n    )\n  }\n  \n  return(\n    <div>\n      <div>\n        <h2 style={{\"marginLeft\": \"130px\"}}>\n          To do\n        </h2>\n        <img src={imgPath} alt=\"welcome\" width=\"400\"/>\n      </div>\n\n      <form onSubmit={submitHandler}>\n        <input name=\"task\" />\n        <button> Create TODO </button>\n      </form>\n      <div style={{\"marginTop\": \"20px\"}}>\n        {tasks.map((task) => (\n          <div key={task.id}>\n            <li>\n              { task.text }\n              <button\n                onClick={() => switchDone(task.id)}\n              >\n                { \n                task.done ? \"Mark done\" : \"Mark undone\"\n                }\n            </button>  \n            </li>\n\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}